plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.7.6'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.penguin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // swagger
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false
    }

    def QClass = []
    for (qPattern in "**/QA".."**/QZ") {
        QClass.add(qPattern + "*")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            "**/CuppingNoteApplication*",
                            '**/*Config*'
                    ] + QClass)
        }))
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def QClass = []
    for (qPattern in '*.QA'..'*.QZ') {
        QClass.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'BUNDLE'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
//                minimum = 0.80
            }

            excludes = [
                    '**.CuppingNoteApplication*',
                    '**/*Config*'
            ] + QClass
        }
    }
    finalizedBy 'copyReports'
}

jacocoTestReport.doFirst {
    delete file('src/main/resources/static/reports')
}

task copyReports(type: Copy) {
    dependsOn('jacocoTestCoverageVerification')
    from file("build/reports/jacoco/test/html")
    into file("src/main/resources/static/reports")
}